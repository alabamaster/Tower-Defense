/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <td>
#include <cstrike>
#include <ColorChat>

#define PLUGIN "Tower Defense: Best player of Wave/Game"
#define VERSION "1.0"
#define AUTHOR "GT Team"

new g_PlayerWaveDamage[33]
new g_PlayerTotalDamage[33]
new g_PlayerWaveKills[33]
new g_PlayerTotalKills[33]

enum CVARS
{
	CVAR_SHOW_WAVE_INFO,
	CVAR_SHOW_ENDGAME_INFO,
	CVAR_HOW_MANY_PLAYERS,
	CVAR_BEST_PLAYER_GOLD,
	CVAR_BEST_PLAYER_MONEY,
	CVAR_SHOW_USER_STATS_CMD
}

new g_CvarPointer[CVARS];
new g_CvarValues[CVARS];

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	g_CvarPointer[CVAR_SHOW_WAVE_INFO] 		= register_cvar("td_show_best_of_wave", "1");
	g_CvarPointer[CVAR_SHOW_ENDGAME_INFO] 	= register_cvar("td_show_best_of_game", "1");
	g_CvarPointer[CVAR_HOW_MANY_PLAYERS] 	= register_cvar("td_show_best_num", "3");
	g_CvarPointer[CVAR_BEST_PLAYER_GOLD] 	= register_cvar("td_show_best_gold", "1");
	g_CvarPointer[CVAR_BEST_PLAYER_MONEY] 	= register_cvar("td_show_best_money", "150");
	g_CvarPointer[CVAR_SHOW_USER_STATS_CMD] = register_cvar("td_show_user_stats_cmd", "1");
	
	register_clcmd("say /best", "ShowActuallyBestPlayers");
	register_clcmd("say /mystats", "ShowUserStats");
	register_clcmd("say /bestw", "ShowBestPlayersOfWave");
}

public client_disconnected(id)
{
	g_PlayerTotalDamage[id] = 0;
	g_PlayerTotalKills[id] = 0;
	g_PlayerWaveKills[id] = 0;
	g_PlayerWaveDamage[id] = 0;
}

public td_settings_refreshed()
{
	g_CvarValues[CVAR_SHOW_WAVE_INFO] 		= get_pcvar_num(g_CvarPointer[CVAR_SHOW_WAVE_INFO]);
	g_CvarValues[CVAR_SHOW_ENDGAME_INFO] 	= get_pcvar_num(g_CvarPointer[CVAR_SHOW_ENDGAME_INFO]);
	g_CvarValues[CVAR_HOW_MANY_PLAYERS] 	= get_pcvar_num(g_CvarPointer[CVAR_HOW_MANY_PLAYERS]);
	g_CvarValues[CVAR_BEST_PLAYER_GOLD] 	= get_pcvar_num(g_CvarPointer[CVAR_BEST_PLAYER_GOLD]);
	g_CvarValues[CVAR_BEST_PLAYER_MONEY] 	= get_pcvar_num(g_CvarPointer[CVAR_BEST_PLAYER_MONEY]);
	g_CvarValues[CVAR_SHOW_USER_STATS_CMD] 	= get_pcvar_num(g_CvarPointer[CVAR_SHOW_USER_STATS_CMD]);
}

public td_take_damage(iPlayer, iEnt, iWeapon, Float:fOutDamage, szInDamage[3])
{
	static damage; damage = floatround(fOutDamage);
		
	g_PlayerTotalDamage[iPlayer] += damage;
	g_PlayerWaveDamage[iPlayer] += damage;
	g_PlayerTotalDamage[0] += damage;
}

public td_monster_killed(iEnt, iPlayer, iMonsterType)
{
	g_PlayerTotalKills[iPlayer] += 1;
	g_PlayerWaveKills[iPlayer] += 1;
	g_PlayerTotalKills[0] += 1;
}


public ShowBestPlayersOfWave(id)
	td_wave_ended(-1);

public ShowActuallyBestPlayers(id)
	td_game_ended(-1)

public GetAlivePlayers()
{
	new num = 0;
	for(new i = 1 ; i <= 33; i ++)
		if(is_user_alive(i))
			num++;
	return num;
}

public td_wave_ended(iEndedWave)
{
	if(!g_CvarValues[CVAR_SHOW_WAVE_INFO])
		return;
	if(td_get_max_wave() == iEndedWave)
		return;
	if(GetAlivePlayers() == 1)
		return;
		
	new players[32], szText[256], szUserName[33], kills, numOfPlayers = g_CvarValues[CVAR_HOW_MANY_PLAYERS];
	
	get_best_players(players);
	
	formatex(szText, charsmax(szText), "Best %s of wave:^n", numOfPlayers == 1 ? "player" : "players");
	
	for(new i; i < numOfPlayers; i++)
	{
		static player_id; player_id = players[i];
		
		if(!is_user_alive(player_id))
			continue
			
		get_user_name(player_id, szUserName, 32)
		kills = g_PlayerWaveKills[player_id];
		format(szText, 255, "%s%s: %d %s / %d damage^n", szText, szUserName,  kills, kills == 1 ? "kill" : "kills", g_PlayerWaveDamage[player_id]);
		
		if(i == 0)
		{
			if(g_CvarValues[CVAR_BEST_PLAYER_GOLD] && iEndedWave != -1)
			{
				td_set_user_info(player_id, PLAYER_GOLD, td_get_user_info(player_id, PLAYER_GOLD)+g_CvarValues[CVAR_BEST_PLAYER_GOLD])
				ColorChat(player_id, GREEN, "[TD]^x01 You got^x04 %d^x01 gold for being best player of this wave.", g_CvarValues[CVAR_BEST_PLAYER_GOLD]);
			}
			
			if(g_CvarValues[CVAR_BEST_PLAYER_MONEY] && iEndedWave != -1)
			{
				static money; money = cs_get_user_money(player_id);
				
				cs_set_user_money(player_id, (money + g_CvarValues[CVAR_BEST_PLAYER_MONEY]) > 16000 ? 16000 : money+g_CvarValues[CVAR_BEST_PLAYER_MONEY]);
				ColorChat(player_id, GREEN, "[TD]^x01 You got^x04 $%d^x01 for being best player of this wave.",g_CvarValues[CVAR_BEST_PLAYER_MONEY]);
			}
		}
		
	}
	
	set_hudmessage(0, 255, 0, 0.51, 0.33, 2, 2.0, 7.0, 0.05, 0.5)
	show_hudmessage(0, szText);
}

public td_wave_started(iWave, iMonsterType, iNum)
{
	for(new i = 1 ; i < 33; i++)
	{
		if(!is_user_connected(i))
			continue;
			
		g_PlayerWaveDamage[i] = 0;
		g_PlayerWaveKills[i] = 0;
	}
}

public td_game_ended(iEntResult)
{
	if(!g_CvarValues[CVAR_SHOW_ENDGAME_INFO])
		return;
		
	new players[32], szText[256],  szUserName[33], kills, numOfPlayers = g_CvarValues[CVAR_HOW_MANY_PLAYERS];
	
	get_best_players(players, false);
	
	formatex(szText, charsmax(szText), "Total kills: %d^nTotal taked damage: %d^n^nBest %s of this map:^n", g_PlayerTotalKills[0], g_PlayerTotalDamage[0], numOfPlayers == 1 ? "player" : "players");
	
	for(new i; i < numOfPlayers; i++)
	{
		static player_id; player_id = players[i];
		
		if(!is_user_alive(player_id))
			continue
			
		get_user_name(player_id, szUserName, 32)
		kills = g_PlayerTotalKills[player_id];
		
		format(szText, 255, "%s%s: %d %s / %d damage^n", szText, szUserName,  kills, kills == 1 ? "kill" : "kills", g_PlayerTotalDamage[player_id]);
	}
		
	set_hudmessage(0, 255, 0, 0.51, 0.33, 2, 2.0, 7.0, 0.05, 0.5)
	show_hudmessage(0, szText);
}

public ShowUserStats(id)
{
	if(!g_CvarValues[CVAR_SHOW_USER_STATS_CMD])
		return;
		
	set_hudmessage(0, 255, 0, 0.51, 0.33, 2, 2.0, 7.0, 0.05, 0.5)
	show_hudmessage(id, "Your total kills: %d^nYour total taked damage: %d^n^nYour wave kills: %d^nYour wave taken damage: %d", 
		g_PlayerTotalKills[id], g_PlayerTotalDamage[id], g_PlayerWaveKills[id], g_PlayerWaveDamage[id]);
}

get_best_players(players[32], bool:waveBest = true)
{
	new num = 0;
	get_players(players, num);
	SortCustom1D(players, num, (waveBest? "SortWaveBest" : "SortGameBest"))
}

public SortGameBest(id1, id2)
{
	if(g_PlayerTotalKills[id1] > g_PlayerTotalKills[id2])
		return -1;
	else if(g_PlayerTotalKills[id1] < g_PlayerTotalKills[id2])
		return 1;
	else
	{
		if(g_PlayerTotalDamage[id1] > g_PlayerTotalDamage[id2])
			return -1;
		else if(g_PlayerTotalDamage[id1] < g_PlayerTotalDamage[id2])
			return 1;
		else
			return 0;
	}
}  	


public SortWaveBest(id1, id2)
{
	if(g_PlayerWaveKills[id1] > g_PlayerWaveKills[id2])
		return -1;
	else if(g_PlayerWaveKills[id1] < g_PlayerWaveKills[id2])
		return 1;
	else
	{
		if(g_PlayerWaveDamage[id1] > g_PlayerWaveDamage[id2])
			return -1;
		else if(g_PlayerWaveDamage[id1] < g_PlayerWaveDamage[id2])
			return 1;
		else
			return 0;
	}
}  

public GetAllMonsterKills() 
	return g_PlayerTotalKills[0];

public GetAllMonsterDamage()
	return g_PlayerTotalDamage[0]
