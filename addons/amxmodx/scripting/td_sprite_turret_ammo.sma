/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <td>
#include <engine>
#include <fakemeta_util>

#define PLUGIN "TD: Turrets Ammo Status on Screen"
#define VERSION "1.0"
#define AUTHOR "GT Team"
native addPlayerSprite(id,Float:scale,Float:frameRate,szModel[], 
Float:fAngle, Float:fLen, Float:fTime,Float:fDistance , bool: bTransparent );

new gszModel[] = "sprites/TD/ammo_text.spr";
new gszModel2[] = "sprites/TD/numbers.spr"

new gSprites[33][8][2]
public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
}

public plugin_precache(){
	precache_model(gszModel);
	precache_model(gszModel2);
}

public client_disconnect(id) {
	for(new i; i < 8; i++) {
		gSprites[id][i][0] = 0
		gSprites[id][i][1] = 0
	}
}
public td_turret_low_ammo(id, ent, turret) {
	if(is_user_alive(id)) {
		gSprites[id][turret][0] = addPlayerSprite(id,0.02, 0.0,gszModel2, 360.0-(6.0*(7-turret)), 9.0+(0.5*(7-turret)), 9999.0, 15.0 , true )
		gSprites[id][turret][1] =  addPlayerSprite(id, 0.02, 0.0, gszModel, 360.0-(5.2*(7-turret)), 11.0+(0.45*(7-turret)), 9999.0, 15.0, true)
		
		set_pev(gSprites[id][turret][0], pev_frame, float(3+turret))
		
		new szData[3]
		szData[0] = ent
		szData[1] = turret
		set_task(3.0, "checkStatus", id+515, szData, 2)
	}
}

public checkStatus(szData[3], id) {
	id-=515
	new ent = szData[0]
	new turret = szData[1]
	if(!is_user_alive(id) || !td_is_turret(ent)) {
		delsprites(id, turret, 3)
		return
	}
	if(td_get_turret_ammo(id, turret) <= td_get_player_alarm_value(id) && (pev(gSprites[id][turret][1], pev_frame) == 1.0) && td_get_turret_ammo(id, turret) != -1) {
		changename(id, turret, 0.0)
		set_task(3.0, "checkStatus", id+515, szData, 2)
		return
	}	
	if(td_get_turret_ammo(id, turret) > td_get_player_alarm_value(id)) {
		delsprites(id, turret, 3)
		return
	}

	
	if(pev(gSprites[id][turret][0], pev_iuser3) == 0) {
		new type = _:td_get_player_turret_type(id, turret)
		set_pev(gSprites[id][turret][0], pev_iuser4, (pev(gSprites[id][turret][0], pev_frame)))
		set_pev(gSprites[id][turret][0], pev_frame, float(type-1)) 
		new color[3]
		switch(e_TurretsType:type) {
			case TURRET_NORMAL: { color[0] = 255; color[1] = 255; }
			case TURRET_LASER: color[0] = 255
			case TURRET_LIGHTING: color[2] = 255
		}
		fm_set_rendering(gSprites[id][turret][0], kRenderFxNone, color[0], color[1], color[2], kRenderTransAdd, 255)
		set_pev(gSprites[id][turret][0], pev_iuser3, 1)
		
		
	} else if(pev(gSprites[id][turret][0], pev_iuser3) == 1) {
		fm_set_rendering(gSprites[id][turret][0], kRenderFxNone, 255, 255, 255, kRenderTransAdd, 255)
		set_pev(gSprites[id][turret][0], pev_iuser3, 0)
		set_pev(gSprites[id][turret][0], pev_frame, float(pev(gSprites[id][turret][0], pev_iuser4)))
	}
	set_task(3.0, "checkStatus", id+515, szData, 2)
}

public td_turret_no_ammo(id, ent, turret) {
	if(is_user_alive(id)) {
		new was
		if(is_valid_ent(gSprites[id][turret][1]) ) {
			changename(id, turret, 1.0)
		} else {
			was = 1
			gSprites[id][turret][1] =  addPlayerSprite(id, 0.02, 0.0, gszModel, 360.0-(5.2*(7-turret)), 11.0+(0.45*(7-turret)), 9999.0, 15.0, true)
		}
		
		if( !is_valid_ent(gSprites[id][turret][0] ) ) {
			was = 1
			gSprites[id][turret][0] = addPlayerSprite(id,0.02, 0.0,gszModel2, 360.0-(6.0*(7-turret)), 9.0+(0.5*(7-turret)), 9999.0, 15.0 , true )
			set_pev(gSprites[id][turret][0], pev_frame, float(3+turret))
		}
		
		if(was) {
			new szData[3]
			szData[0] = ent
			szData[1] = turret
			set_task(3.0, "checkStatus", id+515, szData, 2)
		}
	}
}
			
			
public delsprites(id, turret, mode) {
	if((mode == 1 || mode == 3) && is_valid_ent(gSprites[id][turret][0])) {
		remove_entity(gSprites[id][turret][0])
		gSprites[id][turret][0] = 0
	}
	if((mode == 2 || mode == 3) && is_valid_ent(gSprites[id][turret][1])) {
		remove_entity(gSprites[id][turret][1])
		gSprites[id][turret][1] = 0
	}
}

public changename(id,turret, Float:value) {
	if(is_valid_ent(gSprites[id][turret][1]))
		set_pev(gSprites[id][turret][1], pev_frame, value)
}

