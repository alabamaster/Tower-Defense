/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <engine>
#include <td>

#define PLUGIN "TD Traps"
#define VERSION "1.0"
#define AUTHOR "author"

#define MAX_TRACKS 35

new g_szTrapModel[] = "models/mbarrel.mdl"

new Float:g_fTracksOrigin[MAX_TRACKS][3]
//new g_iTracksTraps[MAX_TRACKS]

new bool: g_bStatus = true

new g_iPlayerTrapEnt[MAX_PLAYERS]

public plugin_init() {
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	loadTracks(MAX_TRACKS)
}

public plugin_precache() {
	precache_model(g_szTrapModel)
}

public client_PostThink(id) { 
	if(is_user_alive(id) && g_bStatus || g_iPlayerTrapEnt[id]) {
		new iAimOrigin[3], Float:fAimOrigin[3], iTrackIndex
		get_user_origin(id, iAimOrigin, 3)
		
		IVecFVec(iAimOrigin, fAimOrigin)
		
		new iEntList[9], iNum = find_sphere_class(0, "info_target", 80.0, iEntList, 9, fAimOrigin), szFormat[16]
		
		if(!(get_user_button(id) & IN_USE)) {
			return
		}
		for( new i; i < iNum ; i++ ) {
			if(is_valid_ent(iEntList[i])) {
				entity_get_string(iEntList[i], EV_SZ_classname, szFormat, charsmax(szFormat))
				
				if(containi(szFormat, "monster") != -1) {
					continue
				}
				
				entity_get_string(iEntList[i], EV_SZ_targetname, szFormat, charsmax(szFormat))
				
				if(containi(szFormat, "track") != -1) {
					replace_string(szFormat, charsmax(szFormat), "track", "")
					trim(szFormat)
					iTrackIndex = str_to_num(szFormat)
					new iEnt
					
					g_iPlayerTrapEnt[id] = iEnt = create_entity("func_wall")
					
					entity_set_string(iEnt, EV_SZ_classname, "trap")
					entity_set_string(iEnt, EV_SZ_model, g_szTrapModel)
					
					entity_set_int(iEnt, EV_INT_solid, SOLID_NOT)
					entity_set_edict(iEnt, EV_ENT_owner, id)
					
					entity_set_origin(iEnt, g_fTracksOrigin[iTrackIndex])
					client_print(0,3, "POSTAWIONO %d", iEnt)
					entity_set_float(iEnt, EV_FL_health, 99999.9)
					
					break
				}
			}
		}
		client_print(0,3, "%0.1f %0.1f %0.1f | %d / %d", fAimOrigin[0], fAimOrigin[1], fAimOrigin[2], iNum, iTrackIndex)
				
	}
}
		
		
public loadTracks(iTracksNum) {
	new iEnt, szFormat[16]
	
	iEnt = find_ent_by_tname(-1, "track1")
	
	if( ! is_valid_ent ( iEnt ) )  {
		g_bStatus = false
		return PLUGIN_CONTINUE
	}
	for ( new i = 2 ; i < iTracksNum; i++ ) {
		formatex(szFormat, charsmax(szFormat), "track%d", i)
		
		iEnt = find_ent_by_tname(-1, szFormat)
		
		if( is_valid_ent(iEnt) ) {
			static Float:fVector[3]
			entity_get_vector(iEnt, EV_VEC_origin, fVector)
			fVector[2]-=20.0
			g_fTracksOrigin[i] = fVector
		}
	}
	
	return PLUGIN_CONTINUE
}

		