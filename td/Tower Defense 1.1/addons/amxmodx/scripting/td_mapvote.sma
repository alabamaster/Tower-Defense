/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <amxmisc>
#include <engine>
#include <fakemeta>
#include <fakemeta_util>


#define PLUGIN "New Plug-In"
#define VERSION "1.0"
#define AUTHOR "author"

#define EV_INT_mapvote_header 	EV_INT_iuser1
#define EV_INT_mapvote_index 	EV_INT_iuser2

#define BLIFE 3
#define VOTE_MAP_COUNT 3
#define LAST_MAPS_SAVE 1

new gSaveFile[64];
new gLastMapName[LAST_MAPS_SAVE][32];
new gNumLastMaps;


new Float:g_VoteEntityPosition[VOTE_MAP_COUNT][3][3];
new g_VoteEntity[VOTE_MAP_COUNT];
new g_VotePlayer[33];

new g_Sprite;
new g_VotedMapNum;

new g_VoteMapNames[VOTE_MAP_COUNT][64];
new g_VoteTime = 25;

public plugin_init() 
{
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	register_clcmd("say /testa", "test")
	
	new szFormat[15]
	for(new i; i < VOTE_MAP_COUNT; i++)
	{
		formatex(szFormat, 14, "mapvote%d", i+1)
		register_think(szFormat, "fwThink");
		register_touch(szFormat, "player", "fwTouch");
	}
	
		
	get_datadir(gSaveFile, charsmax(gSaveFile));
	add(gSaveFile, charsmax(gSaveFile), "/lastmaps.txt");
	
	new file = fopen(gSaveFile, "rt");
	
	if(file) 
	{
		new line[64];
		
		while(!feof(file) && gNumLastMaps < LAST_MAPS_SAVE) 
		{
			fgets(file, line, charsmax(line));
			trim(line);
			remove_quotes(line);
			
			if(line[0])
				copy(gLastMapName[gNumLastMaps], charsmax(gLastMapName[]), line);
		}
		
		fclose(file);
	}
	
	//test conf in td_big
	// 0 - origin - 1 - mins - 2 - max
	g_VoteEntityPosition[0][0][0] = -991.5
	g_VoteEntityPosition[0][0][1] = 640.0
	g_VoteEntityPosition[0][0][2] = 36.0
	
	g_VoteEntityPosition[0][1][0] = -100.0
	g_VoteEntityPosition[0][1][1] = -100.0
	g_VoteEntityPosition[0][1][2] = -50.0
	
	g_VoteEntityPosition[0][2][0] = 100.0
	g_VoteEntityPosition[0][2][1] = 100.0
	g_VoteEntityPosition[0][2][2] = 50.0
	
	g_VoteEntityPosition[1][0][0] = -521.0 
	g_VoteEntityPosition[1][0][1] = 640.0
	g_VoteEntityPosition[1][0][2] = 36.0
	
	g_VoteEntityPosition[1][1][0] = -100.0
	g_VoteEntityPosition[1][1][1] = -100.0
	g_VoteEntityPosition[1][1][2] = -50.0
	
	g_VoteEntityPosition[1][2][0] = 100.0
	g_VoteEntityPosition[1][2][1] = 100.0
	g_VoteEntityPosition[1][2][2] = 50.0
	
	g_VoteEntityPosition[2][0][0] = 19.8
	g_VoteEntityPosition[2][0][1] = 640.0
	g_VoteEntityPosition[2][0][2] = 36.0
	
	g_VoteEntityPosition[2][1][0] = -100.0
	g_VoteEntityPosition[2][1][1] = -100.0
	g_VoteEntityPosition[2][1][2] = -50.0
	
	g_VoteEntityPosition[2][2][0] = 100.0
	g_VoteEntityPosition[2][2][1] = 100.0
	g_VoteEntityPosition[2][2][2] = 50.0
}

public client_connect(id)
{
	g_VotePlayer[id] = 0;
}

public plugin_precache()
{
	g_Sprite = precache_model("sprites/white.spr");
	
	precache_model("sprites/TD/votemap_sprites.spr");
}

public test(id)
{
	CreateVote();
}

public plugin_end() 
{	
	new map[32];
	get_mapname(map, charsmax(map));
	
	new f = fopen(gSaveFile, "wt");
	
	fprintf(f, "^"%s^"", map);
	
	if(gNumLastMaps == LAST_MAPS_SAVE)
		gNumLastMaps--;
	
	for(new i = 0; i < gNumLastMaps; i++)
		fprintf(f, "^n^"%s^"", gLastMapName[i]);
	
	fclose(f);
}

public LoadMaps()
{
	new file = fopen("addons/amxmodx/configs/maps.ini", "rt");
	
	if(file) 
	{
		new Array:aMapNames = ArrayCreate(64, 5);
		new line[64];
		
		while(!feof(file) && gNumLastMaps < LAST_MAPS_SAVE) 
		{
			fgets(file, line, 63);
			
			trim(line);
			
			if(line[0] == ';' || !line[0])
				continue
			
			ArrayPushString(aMapNames, line);
		}
		
		new tempMapName[64], bool:wasPlayed = false, actualMapName[64];
		get_mapname(actualMapName, 63)
		new bool:reset = false;
		
		while(g_VotedMapNum < VOTE_MAP_COUNT-1)
		{
			ArrayGetString(aMapNames, random_num(0, ArraySize(aMapNames)-1), tempMapName, 63)
			
			for(new i ; i < LAST_MAPS_SAVE; i++)
			{
				if(equali(tempMapName, gLastMapName[i]))
				{
					wasPlayed = true;
					break;
				}
			}
			for(new i ; i < g_VotedMapNum ; i++)
			{
				if(equali(g_VoteMapNames[i], tempMapName))
				{
					reset = true;
					break;
				}
			}	
			if(reset || wasPlayed || equali(tempMapName, actualMapName))
			{
				wasPlayed = false;
				reset = false;
				continue;
			}
			copy(g_VoteMapNames[g_VotedMapNum++], 63, tempMapName);
			log_amx(tempMapName);
			
		}
		fclose(file);
	}
	
	g_VoteMapNames[g_VotedMapNum++] = "restart"; //add restarting map
	
	
}
public CreateVote()
{
	LoadMaps();  
	CreateEntities()
	ShowMenuWithMapNames()
}

public ShowMenuWithMapNames()
{
	new menu = menu_create("\yMap in votes:", "ShowMenuMapWithNamesCb");
	static szFormat[172]
	
	new iAllVotes;
	
	if(g_VoteTime == 0)
	{
		menu_additem(menu, "Calculating results...");
		
		new result[3]
		GetMapIndexWithMostVotes(result);
		
		RemoveVoteMapEntitiesAndResetUsers();
		set_task(5.0, "ShowResultsMenu", _, result, 2);
	}
	else
	{
		for(new i = 0 ; i < g_VotedMapNum ; i++)
		{
			new iVoteNum = GetPlayersNumInVoteZone(i+1);
			iAllVotes += iVoteNum;
	
			if(i+1 == g_VotedMapNum)
			{
				new iPlayerNoVoted = GetAlivePlayers()-iAllVotes;
				
				if(iPlayerNoVoted)
					formatex(szFormat, charsmax(szFormat), "MAP \y%d\w:\r %s\w | %d %s^n^n\r%d %s\w didn't voted yet", i+1, g_VoteMapNames[i], iVoteNum, iVoteNum == 1 ? "vote" : "votes", iPlayerNoVoted, iPlayerNoVoted == 1 ? "player" : "players");
				else
					formatex(szFormat, charsmax(szFormat), "MAP \y%d\w:\r %s\w | %d %s^n^n\yAll players have voted", i+1, g_VoteMapNames[i], iVoteNum, iVoteNum == 1 ? "vote" : "votes");
				
				format(szFormat, charsmax(szFormat), "%s^n^nEnding vote in: \r%d %s", szFormat, g_VoteTime, g_VoteTime == 1 ? "second:" : "seconds")
			}
			else
				formatex(szFormat, charsmax(szFormat), "MAP \y%d\w:\r %s\w | %d %s", i+1, g_VoteMapNames[i], iVoteNum, iVoteNum == 1 ? "vote" : "votes");
				
			menu_additem(menu, szFormat);
		}
	}
	for(new i = 1 ; i < 33; i ++)
		if(is_user_connected(i))
			menu_display(i, menu);
	
	g_VoteTime--;
	
	if(g_VoteTime == -1)
		return;
		
	set_task(1.0, "ShowMenuWithMapNames", 75102)
}

new bool:Draw = false;

public ShowResultsMenu(result[], task)
{
	new iWinnerMapIndex = result[0];
	new iSecondWinnerMapIndex = result[1];
	
	new menu = menu_create("Result of voting: ", "ShowResultsMenuCb")
	
	new szFormat[128];
	
	
	if(iSecondWinnerMapIndex != -1)
	{
		if(Draw == true)
		{
			new iRandom = random_num(1,2);
			
			formatex(szFormat, charsmax(szFormat), "We have second draw.^n Randomly choosed result is:\r %s^n\nApplying result in \r10\w10 seconds", g_VoteMapNames[result[iRandom]]);
			menu_additem(menu, szFormat);
			
			set_task(10.0, "ChangeLevel", 9218+iRandom);
		}
		else
		{
			formatex(szFormat, charsmax(szFormat), "We have a draw between: '%s' and '%s'^n^nNext vote starts in 5 seconds..", g_VoteMapNames[iWinnerMapIndex], g_VoteMapNames[iSecondWinnerMapIndex]);
			menu_additem(menu, szFormat);
			g_VoteMapNames[0] = g_VoteMapNames[iWinnerMapIndex];
			g_VoteMapNames[1] = g_VoteMapNames[iSecondWinnerMapIndex]
			g_VotedMapNum = 2;
			set_task(5.0, "StartDrawVote")
			Draw = true;
			CreateEntities();
		}
	}
	else
	{
		formatex(szFormat, charsmax(szFormat), "\y'%s'\w wins the vote.^nApplying result in \r10\w seconds.", g_VoteMapNames[iWinnerMapIndex]);
		menu_additem(menu, szFormat);
		set_task(10.0, "ChangeLevel", 9218+iWinnerMapIndex);
	}
	
	for(new i = 1 ; i < 33; i ++)
		if(is_user_connected(i))
			menu_display(i, menu);
}

public ShowResultsMenuCb(id, menu, item) {}

public ChangeLevel(iMapIndex)
{
	iMapIndex -= 9218
	
	new szMapName[64]
	
	if(containi(g_VoteMapNames[iMapIndex], "restart") != -1)
		get_mapname(szMapName, charsmax(szMapName))
	else
		copy(szMapName, charsmax(szMapName), g_VoteMapNames[iMapIndex]);
	
	server_cmd("changelevel %s", szMapName);
}
public RemoveVoteMapEntitiesAndResetUsers()
{
	for(new i = 0; i < VOTE_MAP_COUNT; i++)
	{
		if(is_valid_ent(g_VoteEntity[i]))
		{	
			if(is_valid_ent(entity_get_int(g_VoteEntity[i], EV_INT_mapvote_header)))
				remove_entity(entity_get_int(g_VoteEntity[i], EV_INT_mapvote_header))
			remove_entity(g_VoteEntity[i])
		}
	}
	
	for(new i = 1 ; i < 33 ; i++)
		if(is_user_alive(i))
			g_VotePlayer[i] = 0;
}
public StartDrawVote()
{
	g_VoteTime = 25;
	ShowMenuWithMapNames();
}
public GetMapIndexWithMostVotes(result[])
{
	new Array:aVotes = ArrayCreate(g_VotedMapNum, VOTE_MAP_COUNT)

	for(new i = 0 ; i < g_VotedMapNum; i++)
		 ArrayPushCell(aVotes, GetPlayersNumInVoteZone(i+1));

	new tempvotes, mostVotes, secondMostVotes, firstMapId, secondMapId;
	
	for (new i = 0; i < g_VotedMapNum; i++)
	{
		tempvotes = ArrayGetCell(aVotes, i);
		
		if(tempvotes > mostVotes)
		{
			mostVotes = tempvotes;
			firstMapId = i;
		}
	}
	
	for(new i = 0 ; i < g_VotedMapNum; i++)
	{
		if(i == firstMapId)
			continue;
		
		tempvotes = ArrayGetCell(aVotes, i);
		
		if(tempvotes > secondMostVotes)
		{
			secondMostVotes = tempvotes;
			secondMapId = i;
		}
	}
	
	if(mostVotes == secondMostVotes)
	{
		result[0] = firstMapId;
		result[1] = secondMapId;
	}
	else
	{
		result[0] = firstMapId;
		result[1] = -1;
	}
	
	ArrayDestroy(aVotes);
	
}

public GetAlivePlayers()
{
	new num = 0;
	for(new i = 0 ; i < 33; i ++)
		if(is_user_alive(i))
			num++;
	
	return num;
}

public ShowMenuMapWithNamesCb(id, menu, item) {}

public fwTouch(ent, id)
{
	g_VotePlayer[id] = entity_get_int(ent, EV_INT_mapvote_index);

	if(!task_exists(id+61921))
		set_task(3.0, "CheckIfUserIsInVoteZone", id+61921);
}

public CheckIfUserIsInVoteZone(id)
{
	id -= 61921;
	
	if(is_user_alive(id))
	{
		new szClassName[15], entlist[2], bool:isPlayerInAnyZone = false;
		
		for(new i = 1; i <= g_VotedMapNum; i++)
		{
			formatex(szClassName, 14, "mapvote%d", i);
		
			if(find_sphere_class(id, szClassName, 1.0, entlist, 1))	
			{
				isPlayerInAnyZone = true;
				break;
			}
		}
		
		if(!isPlayerInAnyZone)
			g_VotePlayer[id] = 0;
	}
	else
		if(is_user_connected(id))
			g_VotePlayer[id] = 0;
}

public CreateEntities()
{
	new szClassname[15]
	for(new i ; i < g_VotedMapNum; i++)
	{
		formatex(szClassname, 14, "mapvote%d", i+1)
		
		new ent = g_VoteEntity[i] = create_entity("trigger_multiple");
		new headerEnt = create_entity("env_sprite");
		
		set_pev(ent, pev_classname, szClassname);
		set_pev(ent, pev_origin, g_VoteEntityPosition[i][0]);
		dllfunc(DLLFunc_Spawn, ent);

		entity_set_size(ent, g_VoteEntityPosition[i][1], g_VoteEntityPosition[i][2]);
		
		entity_set_int(ent, EV_INT_mapvote_index, i+1);
		entity_set_int(ent, EV_INT_mapvote_header, headerEnt);
		
		set_pev(ent, pev_solid, SOLID_TRIGGER);
		set_pev(ent, pev_movetype, MOVETYPE_NONE);
		
		set_pev(ent, pev_nextthink, get_gametime()+BLIFE);
		
		if(containi(g_VoteMapNames[i], "restart") == -1)
			entity_set_float(headerEnt, EV_FL_frame, (1.0*(i+1)))
		else
			entity_set_float(headerEnt, EV_FL_frame, 0.0)
		
		entity_set_float(headerEnt, EV_FL_scale, 1.0);
		fm_set_rendering(headerEnt, kRenderFxNone, 0, 0, 0, kRenderTransAdd, 255);
		
		entity_set_model(headerEnt, "sprites/TD/votemap_sprites.spr");
		set_pev(headerEnt, pev_classname, "mapvote%d_header", i+1);
		
		new Float:headerOrigin[3];
		headerOrigin[0] = g_VoteEntityPosition[i][0][0];
		headerOrigin[1] = g_VoteEntityPosition[i][0][1];
		headerOrigin[2] = g_VoteEntityPosition[i][0][2]+30.0;
		
		set_pev(headerEnt, pev_origin, headerOrigin);
		
		

	}
}

public GetPlayersNumInVoteZone(iZoneIndex)
{
	new num;
	for(new i = 1 ; i < 33; i++)
		if(is_user_alive(i) && g_VotePlayer[i] == iZoneIndex)
			num++;
	return num;
}
public fwThink(ent)
{
	Create_Box(ent);	
	set_pev(ent, pev_nextthink, get_gametime()+BLIFE);
}

stock Create_Box( ent)
{
	new Float:maxs[3], Float:mins[3];
	pev(ent, pev_absmax, maxs);
	pev(ent, pev_absmin, mins);
	
	new Float:fOrigin[3];
	pev(ent, pev_origin, fOrigin);
	
	new Float:fOff = -5.0;
	new Float:z;
	for(new i=0;i < 4; i++)
	{
		z = fOrigin[2]+fOff;
		DrawLine(maxs[0], maxs[1], z, mins[0], maxs[1], z);
		DrawLine(maxs[0], maxs[1], z, maxs[0], mins[1], z);
		DrawLine(maxs[0], mins[1], z, mins[0], mins[1], z);
		DrawLine(mins[0], mins[1], z, mins[0], maxs[1], z);
		fOff += 5.0;
	}
}

stock DrawLine(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2, iColor[3] = {0, 50, 255}) {
	new Float:start[3], Float:stop[3];
	start[0] = x1;
	start[1] = y1;
	start[2] = z1 - 20.0;
	
	stop[0] = x2;
	stop[1] = y2;
	stop[2] = z2 - 20.0;
	
	Create_Line(start, stop, iColor);
}

stock Create_Line(const Float:start[], const Float:stop[], iColor[3])
{
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_BEAMPOINTS)
	engfunc(EngFunc_WriteCoord, start[0])
	engfunc(EngFunc_WriteCoord, start[1])
	engfunc(EngFunc_WriteCoord, start[2])
	engfunc(EngFunc_WriteCoord, stop[0])
	engfunc(EngFunc_WriteCoord, stop[1])
	engfunc(EngFunc_WriteCoord, stop[2])
	write_short(g_Sprite)
	write_byte(1)
	write_byte(5)
	write_byte(10*BLIFE)
	write_byte(20)
	write_byte(0)
	write_byte(iColor[0])	// RED
	write_byte(iColor[1])	// GREEN
	write_byte(iColor[2])	// BLUE					
	write_byte(250)	// brightness
	write_byte(5)
	message_end()
}
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1045\\ f0\\ fs16 \n\\ par }
*/
/* AMXX-Studio Notes - DO NOT MODIFY BELOW HERE
*{\\ rtf1\\ ansi\\ deff0{\\ fonttbl{\\ f0\\ fnil Tahoma;}}\n\\ viewkind4\\ uc1\\ pard\\ lang1045\\ f0\\ fs16 \n\\ par }
*/
