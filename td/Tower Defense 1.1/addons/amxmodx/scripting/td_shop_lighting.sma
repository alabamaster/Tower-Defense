/* Plugin generated by AMXX-Studio */

#include <amxmodx>
#include <td>
#include <hamsandwich>
#include <engine>
#include <colorchat>

#define PLUGIN "TD SHOP: Lighting"
#define VERSION "1.0"
#define AUTHOR "GT Team"

new item;

new g_LightingNum[33]
new giSpriteLighting

public plugin_init() {
	new id = register_plugin(PLUGIN, VERSION, AUTHOR)
	
	item = td_shop_register_item("Lighting", "You got one lighting power! (Button'X') It takes 1000 damage", 70, 0, id)
	register_clcmd("radio2",     "cmdUseLighting")
}

public plugin_precache()
	giSpriteLighting = precache_model("sprites/lgtning.spr")
	
public td_shop_item_selected(id, itemid)
 {
	if(item == itemid) 
	{

		if(td_get_user_info(id, PLAYER_LEVEL) >= 10) 
		{
			ColorChat(id, GREEN, "[TD]^x01 You cannot buy lighting becouse you earned 10 level.");
			return PLUGIN_HANDLED;
		}
		g_LightingNum[id]++
	}
	return PLUGIN_CONTINUE
}
public cmdUseLighting(id)
{
	if(!is_user_alive(id) || !g_LightingNum[id])
		return PLUGIN_CONTINUE
		
	new Float:AimedOrigin[3]
	new Origin[3]
	
	get_user_origin(id, Origin, 3)
	IVecFVec(Origin, AimedOrigin)
	
	new entlist[1]
	find_sphere_class(0, "monster", 80.0, entlist, 1, AimedOrigin)
	
	if(!is_valid_ent(entlist[0])  ||  entity_get_int(entlist[0], EV_INT_iuser1) == _:ROUND_NONE) {
		client_print(id, print_center, "You must aim at the monster!")
		return PLUGIN_HANDLED
	}
	g_LightingNum[id]--
	if(g_LightingNum[id] < 0)
		g_LightingNum[id] = 0
	else
		client_print(id, print_center, "You can use lighting %d time/s!", g_LightingNum[id])
		
	emit_sound(id, CHAN_AUTO, "TD/player_use_lighting.wav", 1.0, ATTN_NORM, 0, PITCH_NORM); 
	ExecuteHamB(Ham_TakeDamage, entlist[0], id, id, 1000.0, DMG_BLAST)
	Create_Lighting(id, entlist[0], 0, 1, 10, 20, 20, 255, 255, 255, 255, 3)
	
	return PLUGIN_HANDLED
}
stock Create_Lighting(startEntity, endEntity, startFrame, frameRate, life, width, noise, red, green, blue, alpha, speed)
{
	message_begin( MSG_BROADCAST, SVC_TEMPENTITY )
	write_byte( TE_BEAMENTS )
	write_short( startEntity )              // start entity
	write_short( endEntity )                // end entity
	write_short( giSpriteLighting )                  // model
	write_byte( startFrame )                // starting frame
	write_byte( frameRate )                 // frame rate
	write_byte( life )                              // life
	write_byte( width )                             // line width
	write_byte( noise )                             // noise amplitude
	write_byte( red )                               // red
	write_byte( green )                             // green
	write_byte( blue )                              // blue
	write_byte( alpha )                             // brightness
	write_byte( speed )                             // scroll speed
	message_end()
}
